FUNCTION_BLOCK FuzzyGhosts	// Block definition (there may be more than one block per file)

VAR_INPUT				// Define input variables

	edible : REAL;
	behindPacman : REAL;
	
	MSPACMANconfidence : REAL;

	distanceToMSPACMANNearestPPill : REAL;
	distanceNearestPPill : REAL;
	
	MSPACMANdistanceNearestPPill : REAL;
	MSPACMANdistance : REAL;
	distanceToClosestEdibleGhost : REAL;
	distanceToClosestNotEdibleGhost : REAL;

	ghostDensity : REAL;
	pillCount : REAL;

END_VAR

VAR_OUTPUT				// Define output variable

	Chase : REAL;
	RunAway : REAL;
	CoverExit : REAL;
	CoverLastPills : REAL;
	Disperse : REAL;
	GoToPPill : REAL;
	GoToGhost : REAL;

END_VAR

// Fuzzify input variables

FUZZIFY edible			// Fuzzify input variable 'edible': {'true', 'false'}
    TERM true := 1;
    TERM false := 0;
END_FUZZIFY

FUZZIFY behindPacman			// Fuzzify input variable 'behindPacman': {'true', 'false'}
    TERM true := 1;
    TERM false := 0;
END_FUZZIFY

FUZZIFY MSPACMANconfidence				// Fuzzify input variable 'MSPACMANconfidence': {'low', 'medium' , 'high'}
	TERM low := (0,1)(25,1)(50,0) ; 
	TERM medium := gauss 50 25;
	TERM high := (50,0)(75,1)(100,1);
END_FUZZIFY

FUZZIFY MSPACMANdistanceNearestPPill	// Fuzzify input variable 'MSPACMANdistanceNearestPPill': {'near', 'medium' , 'far'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY MSPACMANdistance	// Fuzzify input variable 'MSPACMANdistance': {'near', 'medium' , 'far'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY distanceToClosestEdibleGhost			// Fuzzify input variable 'distanceToClosestEdibleGhost': {'near', 'medium' , 'far'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY distanceToClosestNotEdibleGhost			// Fuzzify input variable 'distanceToClosestNotEdibleGhost': {'near', 'medium' , 'far'}
	TERM near := (0, 1) (60, 0) ; 
	TERM medium := gauss 75 25;
	TERM far := (90, 0) (150, 1) (200, 1);
END_FUZZIFY

FUZZIFY ghostDensity			// Fuzzify input variable 'ghostDensity': {'normal' , 'high'}
	TERM normal := sigm -9 1.5;
	TERM high := sigm 3 1.5;
END_FUZZIFY

FUZZIFY pillCount			// Fuzzify input variable 'pillCount': {'low' , 'normal'}
	TERM low := sigm -1 15;
	TERM normal := sigm 5 15;
END_FUZZIFY


// Defuzzify output variables

DEFUZZIFY RunAway			// Defuzzify output variable 'RunAway' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Chase			// Defuzzify output variable 'Chase' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY CoverExit			// Defuzzify output variable 'CoverExit' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY CoverLastPills			// Defuzzify output variable 'CoverLastPills' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY Disperse			// Defuzzify output variable 'Disperse' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY GoToPPill			// Defuzzify output variable 'GoToPPill' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

DEFUZZIFY GoToGhost			// Defuzzify output variable 'GoToGhost' : {'never', 'rarely', 'sometimes', 'usually', 'always'}
	TERM never := gbell 30 40 0;
	TERM rarely := gbell 20 30 50;
	TERM sometimes := gbell 10 20 80;
	TERM usually := gbell 20 30 110;
	TERM always := gbell 30 40 160;
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY


// Define rules

RULEBLOCK GhostsRules

	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'MAX' accumulation method (Other options PROBOR and SUM)
	
	
	// Chase
	
	RULE x : IF edible IS true THEN Chase IS never;
	RULE x : IF edible IS false THEN Chase IS usually;
	RULE x : IF edible IS false AND MSPACMANconfidence IS low THEN Chase IS rarely;
	RULE x : IF edible IS false AND MSPACMANconfidence IS medium THEN Chase IS sometimes;
	RULE x : IF edible IS false AND MSPACMANconfidence IS high AND MSPACMANdistanceNearestPPill IS far THEN Chase IS always;
	RULE x : IF edible IS false AND MSPACMANconfidence IS high AND MSPACMANdistanceNearestPPill IS medium THEN Chase IS sometimes;
	RULE x : IF edible IS false AND MSPACMANconfidence IS high AND MSPACMANdistanceNearestPPill IS near THEN Chase IS rarely;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS high AND MSPACMANdistance IS near THEN Chase IS rarely;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS high AND MSPACMANdistance IS medium THEN Chase IS sometimes;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS high AND MSPACMANdistance IS far THEN Chase IS usually;
	RULE x : IF edible IS false AND behindPacman IS false AND MSPACMANconfidence IS high AND MSPACMANdistance IS near THEN Chase IS always;
	RULE x : IF edible IS false AND behindPacman IS false AND MSPACMANconfidence IS high AND MSPACMANdistance IS medium THEN Chase IS usually;
	RULE x : IF edible IS false AND behindPacman IS false AND MSPACMANconfidence IS high AND MSPACMANdistance IS far THEN Chase IS usually;
	
	// RunAway
	
	RULE x : IF edible IS false THEN RunAway IS sometimes;
	RULE x : IF edible IS false AND MSPACMANdistanceNearestPPill IS near THEN RunAway IS usually;
	RULE x : IF edible IS true THEN RunAway IS usually;
	RULE x : IF edible IS true AND ghostDensity IS high THEN RunAway IS rarely;
	
	/*
	edible
	behindPacman 
	MSPACMANconfidence 
	MSPACMANdistanceNearestPPill 
	MSPACMANdistance 
	distanceToClosestEdibleGhost 
	distanceToClosestNotEdibleGhost 
	ghostDensity 
	pillCount 

	RunAway 
	GoToPPill
	GoToGhost
	*/
	
	// GoToPPill
	
	RULE x : IF edible IS true THEN GoToPPill IS never;
	
	// GoToGhost

	RULE x : IF edible IS true AND MSPACMANconfidence IS low THEN GoToGhost IS usually;
	RULE x : IF edible IS true AND 
	MSPACMANconfidence IS high AND 
	MSPACMANdistance IS medium AND 
	distanceToClosestNotEdibleGhost IS near THEN GoToGhost IS always;
	RULE x : IF edible IS true AND 
	MSPACMANconfidence IS medium AND 
	MSPACMANdistance IS medium AND 
	distanceToClosestNotEdibleGhost IS near THEN GoToGhost IS always; // TODO: CHECK
	
	// Disperse
	
	RULE x : IF edible IS false THEN Disperse IS never;
	RULE x : IF edible IS true AND ghostDensity IS high THEN Disperse IS always;
	
	// Cover Exit
	
	RULE x : IF edible IS true THEN CoverExit IS never;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS low THEN CoverExit IS usually;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS medium THEN CoverExit IS sometimes;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS low AND MSPACMANdistance IS near THEN CoverExit IS always;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS low AND MSPACMANdistance IS medium THEN CoverExit IS usually;
	RULE x : IF edible IS false AND behindPacman IS true AND MSPACMANconfidence IS low AND MSPACMANdistance IS far THEN CoverExit IS rarely;
	RULE x : IF edible IS false AND behindPacman IS false AND MSPACMANconfidence IS low AND MSPACMANdistance IS far THEN CoverExit IS never;
	RULE x : IF edible IS false AND behindPacman IS false AND MSPACMANconfidence IS low AND MSPACMANdistance IS medium THEN CoverExit IS sometimes;
	RULE x : IF edible IS false AND behindPacman IS false AND MSPACMANconfidence IS low AND MSPACMANdistance IS near THEN CoverExit IS never;

    // Cover Last Pills
    
	RULE x : IF edible IS true THEN CoverLastPills IS never;
	RULE x : IF edible IS false AND pillCount IS normal THEN CoverLastPills IS never;
	RULE x : IF edible IS false AND pillCount IS low  AND MSPACMANconfidence IS low THEN CoverLastPills IS always;
	RULE x : IF edible IS false AND pillCount IS low  AND MSPACMANconfidence IS medium THEN CoverLastPills IS usually;
	RULE x : IF edible IS false AND pillCount IS low  AND MSPACMANconfidence IS high AND MSPACMANdistance IS near THEN CoverLastPills IS rarely;
	RULE x : IF edible IS false AND pillCount IS low  AND MSPACMANconfidence IS high AND MSPACMANdistance IS medium THEN CoverLastPills IS sometimes;
	RULE x : IF edible IS false AND pillCount IS low  AND MSPACMANconfidence IS high AND MSPACMANdistance IS far THEN CoverLastPills IS usually;

	
END_RULEBLOCK

END_FUNCTION_BLOCK

